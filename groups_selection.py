import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.spatial.distance import cdist
from tqdm import tqdm
from config import GROUP_SIZE


def group_mean(df_sales_np: np.ndarray, idx_list: list, data_slice: slice):
    return np.mean(df_sales_np[idx_list][:, data_slice], axis=0)


def start_greedy_selection(df_sales_np: np.ndarray, len_store_ids: int, train_slice: slice) -> (list[int], list[int]):
    """
    –î–µ–ª–∏—Ç –º–∞–≥–∞–∑–∏–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—ã A –∏ B –ø–æ –∂–∞–¥–Ω–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        df_sales_np (np.ndarray): –º–∞—Ç—Ä–∏—Ü–∞ [–º–∞–≥–∞–∑–∏–Ω—ã x –Ω–µ–¥–µ–ª–∏]
        len_store_ids (int): –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤
        train_slice (slice): –æ—Ç—Ä–µ–∑–æ–∫ –Ω–µ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    np.random.seed(42)
    indices = np.arange(len_store_ids)
    np.random.shuffle(indices)

    group_a = [indices[0]]
    group_b = [indices[1]]
    used = set(group_a + group_b)

    with tqdm(total=GROUP_SIZE * 2) as pbar:
        while len(group_a) < GROUP_SIZE or len(group_b) < GROUP_SIZE:
            best_candidate = None
            min_diff = float('inf')

            for i in indices:
                if i in used:
                    continue

                if len(group_a) < GROUP_SIZE:
                    mean_A = group_mean(df_sales_np, group_a + [i], train_slice)
                    mean_B = group_mean(df_sales_np, group_b, train_slice)
                    diff_A = np.mean((mean_A - mean_B) ** 2)
                else:
                    diff_A = float('inf')

                if len(group_b) < GROUP_SIZE:
                    mean_A_alt = group_mean(df_sales_np, group_a, train_slice)
                    mean_B_alt = group_mean(df_sales_np, group_b + [i], train_slice)
                    diff_B = np.mean((mean_A_alt - mean_B_alt) ** 2)
                else:
                    diff_B = float('inf')

                if diff_A < diff_B and diff_A < min_diff:
                    best_candidate = (i, 'A')
                    min_diff = diff_A
                elif diff_B < min_diff:
                    best_candidate = (i, 'B')
                    min_diff = diff_B

            if best_candidate:
                idx, group = best_candidate
                used.add(idx)
                if group == 'A':
                    group_a.append(idx)
                else:
                    group_b.append(idx)
                pbar.update(1)
            else:
                break
    return list(map(int, group_a)), list(map(int, group_b))


def pairwise_nearest_groups(df_sales_np, train_slice) -> (list[int], list[int]):
    """
    –î–µ–ª–∏—Ç –º–∞–≥–∞–∑–∏–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—ã A –∏ B –ø–æ –º–µ—Ç–æ–¥—É –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        df_sales_np (np.ndarray): –º–∞—Ç—Ä–∏—Ü–∞ [–º–∞–≥–∞–∑–∏–Ω—ã x –Ω–µ–¥–µ–ª–∏]
        train_slice (slice): –æ—Ç—Ä–µ–∑–æ–∫ –Ω–µ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    data = df_sales_np[:, train_slice]  # –¢–æ–ª—å–∫–æ –æ–±—É—á–∞—é—â–∏–π –ø–µ—Ä–∏–æ–¥

    # –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è, 0 –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏)
    dists = cdist(data, data, metric='euclidean')
    # –ß—Ç–æ–±—ã –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–∞–º—É —Å–µ–±—è
    np.fill_diagonal(dists, np.inf)

    used = set()
    group_a = []
    group_b = []

    with tqdm(total=GROUP_SIZE * 2) as pbar:
        while len(group_a) < GROUP_SIZE and len(used) < len(df_sales_np):
            # –ù–∞–π–¥—ë–º –±–ª–∏–∂–∞–π—à—É—é –µ—â—ë –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –ø–∞—Ä—É
            min_dist = np.inf
            best_pair = None
            for i in range(len(df_sales_np)):
                if i in used:
                    continue
                # –ò–Ω–¥–µ–∫—Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Å–µ–¥–∞
                nearest = np.argsort(dists[i])
                for j in nearest:
                    if j not in used:
                        if dists[i, j] < min_dist:
                            best_pair = (i, j)
                            min_dist = dists[i, j]
                        break

            if best_pair is None:
                break  # –í—Å–µ –ø–∞—Ä—ã —Ä–∞–∑–æ–±—Ä–∞–Ω—ã

            i, j = best_pair
            used.update([i, j])
            group_a.append(i)
            group_b.append(int(j))
            pbar.update(2)

    return group_a, group_b


def check_group_deviation(df_sales_np: np.ndarray, group_a: list[int], group_b: list, train_slice: slice, valid_slice: slice):
    # --- –û—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ---
    train_mean_A = group_mean(df_sales_np, group_a, train_slice)
    train_mean_B = group_mean(df_sales_np, group_b, train_slice)
    valid_mean_A = group_mean(df_sales_np, group_a, valid_slice)
    valid_mean_B = group_mean(df_sales_np, group_b, valid_slice)

    train_diff_pct = (np.mean(train_mean_A) - np.mean(train_mean_B)) / np.mean(train_mean_A)
    valid_diff_pct = (np.mean(valid_mean_A) - np.mean(valid_mean_B)) / np.mean(valid_mean_A)

    print(f'üìä –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ: {train_diff_pct:.4f}')
    print(f'üìä –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {valid_diff_pct:.4f}')

    print(f'üü¶ –ì—Ä—É–ø–ø–∞ A: {group_a}')
    print(f'üü• –ì—Ä—É–ø–ø–∞ B: {group_b}')


def draw_groups_sales_plot(df_sales: pd.DataFrame, group_a: list[int], group_b: list[int], train_end: int):
    # --- –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂ ---
    weeks = df_sales.columns.tolist()
    df_sales_np = df_sales.to_numpy()
    mean_a_full = np.mean(df_sales_np[group_a], axis=0)
    mean_b_full = np.mean(df_sales_np[group_b], axis=0)

    plt.figure(figsize=(12, 6))
    plt.plot(weeks, mean_a_full, label='–ì—Ä—É–ø–ø–∞ A', linewidth=2)
    plt.plot(weeks, mean_b_full, label='–ì—Ä—É–ø–ø–∞ B', linewidth=2, linestyle='--')

    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü—ã train/val
    boundary_index = train_end
    plt.axvline(x=weeks[boundary_index], color='gray', linestyle=':', linewidth=2)
    plt.text(boundary_index + 0.5, max(mean_a_full.max(), mean_b_full.max()) * 0.95, '–≤–∞–ª–∏–¥–∞—Ü–∏—è', color='gray')

    plt.title('–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º: A vs B')
    plt.xlabel('–ù–µ–¥–µ–ª—è')
    plt.ylabel('–ü—Ä–æ–¥–∞–∂–∏')
    plt.legend()
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()
